操作系统启动，init调用fork创建子进程
用户输入指令./str1指示shell运行可执行文件str1
shell进程调用sys_fork()创建str1进程
copy_process()调用get_free_page()取空闲页面
将get_free_page()返回的空闲页面放入task[nr]中
复制当前进程内容
将此进程pid设置为last_pid即新进程号
对此进程tss进行设置
copy_process()调用copy_mem()取得父进程段限长和段基址
copy_mem()根据nr设置子进程段基址
copy_mem()设置段基址到LDT
在GDT 中设置新任务的TSS 和LDT 描述符项，数据从task 结构中取
shell进程调用do_execv()函数
do_execve()初始化参数和环境串空间的页面指针数组（表）
do_execve()取可执行文件的对应inode节点号
do_execve()检查inode的i_mode和i_uid和i_gid
do_execve()调用bread()函数读取指定的数据块保存到bh中
do_execve()操作指向头部份的数据结构的指针ex，对执行文件的执行类型进行区分处理
do_execve()复制脚本程序文件名、解释程序参数和解释程序名到参数和环境空间中
do_execve()取解释程序的inode节点，跳转到restart_interp处重新处理
do_execve()清复位所有信号处理句柄
do_execve()释放原来程序代码段和数据段所对应的内存页表指定的内存块及页表本身
do_execve()调用change_ldt重新设置段限长
do_execve()修改当前进程各字段为新执行程序的信息
do_execve()设置eip和esp
释放共享页面后，str1进程页目录项为0，进入缺页中断
do_no_page()算出指定线性地址在进程空间中相对于进程基址的偏移长度值tmp
do_no_page()新申请了一个页，然后将文件节点中一页的数据读入内存中，并完成与线性地址的映射
运行str1程序
str1执行foo()函数，触发缺页中断
do_no_page()直接调用get_empty_page()，申请一页物理内存并映射到指定线性地址处，返回
str1进程调用exit()函数退出，进入sys_exit()执行
sys_exit()调用do_exit()函数
do_exit释放str1进程代码段和数据段所占内存页

do_exit对当前进程的pwd、root和运行程序的inode进行释放，并分别置空
do_exit对当前进程设置为ZOMBIE状态并设置退出码
do_exit向shell进程发送信号SIGCHLD
shell进程收到信号后，释放str1的任务结构，并解除task[64]的关系
do_exit执行schedule()
用户输出指令./filee
程序filee被执行
程序filee中fopen()函数打开当前目录文件a
fopen()函数调用系统接口函数sys_open
sys_open将用户设置的模式与进程的模式屏蔽码相与
Sys_open 在file_table[64]中找到空闲项f
Current->flip[fd] = f，进程的对应文件句柄的文件结构指针指向搜索到的文件结构
sys_open调用open_namei()
open_namei()调用dir_namei()
dir_namei()调用get_dir()获取指定路径名最顶层目录的inode节点
get_dir()将inode设置为根节点，pathname指向‘root’
get_dir()判断字符串是否到末尾，是则返回inode
dir_namei()获得文件名，计算其长度
返回open_namei(),open_namei()调用find_entry()从枝梢节点读取对应的目录项de
find_entry()读取文件的第一个数据块bh，de=bh->b_data指向数据块头，迭代遍历数据块，查找名字为name长度为namelen的目录项，找到则返回bh，否则返回NULL
open_namei()获取de之后从目录项中调用iget()获取文件inode号
iget从inode表中取出一空白inode，扫描inode表，寻找指定节点的inode号
iget如果在inode表中找到指定节点inode，等待解锁并将该inode节点引用计数+1；如果没找到，则查找对应超级块寻找指定inode，并在inode表中利用前面申请的空闲inode节点在inode表中建立该节点，从相应设备上读取inode信息，返回该inode。
sys_open设置该文件inode节点，初始化文件结构
sys_open返回文件句柄
程序filee读取文件list.txt，调用sys_read()
sys_read判断文件类型，调用file_read()
file_read()调用bmap()确定要读的部分在哪个块上
file_read()根据i 节点和文件表结构信息，取数据块文件当前读写位置在设备上对应的逻辑块号nr。若nr 不为0，则从i 节点指定的设备上读取该逻辑块，如果读操作失败则退出循环。若nr 为0，表示指定的数据块不存在，置缓冲块指针为NULL。
file_read()计算剩余字节数，复制数据到指定用户空间
程序filee写入文件list.txt，调用write()函数
write()调用系统接口sys_write()
sys_write取文件对应的inode，调用file_write()写入文件
file_write()判断已写入字节是否小于需要写入字节count，如果是则找到需要写入的块号，计算字节，拷贝buf到缓冲区，返回写入字节数
程序filee关闭文件list.txt，调用close()
close()调用sys_close()函数通过操作文件句柄关闭文件
filee结束，调用exit()退出
进程filee终止
